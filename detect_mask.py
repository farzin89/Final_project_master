# -*- coding: utf-8 -*-
"""Detect_mask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nx_A1L5_A5jcZ4vjUljU_mCfHr_8RokT
"""

from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
from imutils.video import VideoStream
import numpy as np
import imutils
import time
import cv2
import os

def detect_and_predict_mask (frame,faceNet,maskNet):
  (h,w) = frame.shape[:2]
  blob = cv2.dnn.blobFromImage(frame,1.0,(224,224),(104,0,177.0,123.0))

  #pass the blob through the network and obtain the face detections
  faceNet.setInput(blob)
  detections = faceNet.forward()
  print(detections.shape)

  # initialize our list of faces,their corresponding locations,and the list of predictions from our face mask network
  face = []
  locs = []
  preds = []

  # loop over the detection
  for i in range(0, detections.shape[2]):
    # ectract the confidence (i.e. probability) associated with detection
    confidence = detections[0, 0, i, 2]

    # filter out weak detections by ensuring the confidence is greater than the minimum confidence
    if confidence > 0.5:
      # Compute the (x,y) -coordinates of the bounding box for the object
      box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
      (startX, startY, endX, endY) = box.astype("int")

      # ensure the bounding boxes fall with the dimention of frame
      (startX, startY) = (max(0, startX), max(0, startY))
      (endX, endY) = (min(w - 1, endX), min(h - 1, endY))

