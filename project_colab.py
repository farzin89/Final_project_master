# -*- coding: utf-8 -*-
"""project_colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1368ZPYmWGdLStsTdUfl8ujOeMPmbCuM4
"""

train_dir = "/content/drive/MyDrive/dataset/train/"
test_dir = "/content/drive/MyDrive/dataset/test/"

!wget https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py

# Import series of helper functions for the notebook (we've created/used these in previous notebooks)
from helper_functions import create_tensorboard_callback, plot_loss_curves, unzip_data, compare_historys, walk_through_dir

# How many images/classes are there?
walk_through_dir("/content/drive/MyDrive/dataset")

# Visualize data
import os
import matplotlib.pyplot as plt
plt.figure()
plt.subplot(1,2,1)
steak_img= view_random_image("/content/drive/MyDrive/dataset/train/","with_mask")
plt.subplot(1,2,2)
pizza_img = view_random_image("/content/drive/MyDrive/dataset/train/","without_mask")

# Setup data inputs
import tensorflow as tf
IMG_SIZE = (224, 224)
train_data = tf.keras.preprocessing.image_dataset_from_directory(train_dir,
                                                                                label_mode="categorical",
                                                                                image_size=IMG_SIZE)
                                                                                
test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir,
                                                                label_mode="categorical",
                                                                image_size=IMG_SIZE,
                                                                shuffle=False) # don't shuffle test data for prediction analysis

# Create checkpoint callback to save model for later use
checkpoint_path = "mask_detection_data_model_checkpoint"
checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(checkpoint_path,
                                                         save_weights_only=True, # save only the model weights
                                                         monitor="val_accuracy", # save the model weights which score the best validation accuracy
                                                         save_best_only=True) # only keep the best model weights on file (delete the rest)

# Import the required modules for model creation
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing
from tensorflow.keras.models import Sequential

